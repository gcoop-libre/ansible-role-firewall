#!/bin/sh
# {{ ansible_managed }}
{% if firewall_ipv4_rules_flush %}

# Flush rules & delete user-defined chains
iptables -t filter -F
iptables -t filter -X
iptables -t raw -F
iptables -t raw -X
iptables -t nat -F
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X
{% endif %}
{% if firewall_ipv4_chains %}

# Create custom chains
{% for key, chain in firewall_ipv4_chains | dictsort %}
iptables -t {{ chain.table | default('filter') }} -N {{ chain.name }}
{% endfor %}
{% endif %}

# Default values for chains
iptables -t filter -P INPUT {{ firewall_ipv4_default_allow_input | ternary('ACCEPT', 'DROP') }}
iptables -t filter -P FORWARD {{ firewall_ipv4_default_allow_forward | ternary('ACCEPT', 'DROP') }}
iptables -t filter -P OUTPUT {{ firewall_ipv4_default_allow_output | ternary('ACCEPT', 'DROP') }}
{% if firewall_ipv4_input_disallow_invalid %}

# Disallow invalid connections
iptables -t filter -A INPUT -m conntrack --ctstate INVALID -j DROP
{% endif %}
{% if firewall_ipv4_input_allow_localhost %}

# Accept traffic to loopback interface (localhost)
iptables -t filter -A INPUT -i lo -j ACCEPT
{% endif %}
{% if firewall_ipv4_input_allow_icmp_ping %}

# Accept icmp ping requests
iptables -t filter -A INPUT -p icmp --icmp-type echo-request -j ACCEPT
{% endif %}
{% if firewall_ipv4_input_allow_established %}

# Allow established connections
iptables -t filter -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'filter' and rule.chain | lower == 'input' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_drop | default(False) %}
{% set rule_target = 'DROP' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_reject | default(False) %}
{% set rule_target = 'REJECT' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t filter -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_reject | default(False) %}
{% if rule.target_reject_with is defined %} --reject-with {{ rule.target_reject_with }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% if firewall_ipv4_input_log_disallowed %}

# Log other incoming requests (all of which are dropped) at 15/minute max.
iptables -t filter -A INPUT -m limit --limit 15/minute -j LOG --log-level 7 --log-prefix "Dropped by firewall: "
{% endif %}
{% if firewall_ipv4_forward_allow_established %}

# Allow established connections
iptables -t filter -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'filter' and rule.chain | lower == 'forward' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_drop | default(False) %}
{% set rule_target = 'DROP' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_reject | default(False) %}
{% set rule_target = 'REJECT' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t filter -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_reject | default(False) %}
{% if rule.target_reject_with is defined %} --reject-with {{ rule.target_reject_with }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% if firewall_ipv4_output_allow_localhost %}

# Accept traffic from loopback interface (localhost)
iptables -t filter -A OUTPUT -o lo -j ACCEPT
{% endif %}
{% if firewall_ipv4_output_allow_icmp_ping %}

# Accept icmp ping requests
iptables -t filter -A OUTPUT -p icmp --icmp-type echo-reply -j ACCEPT
{% endif %}
{% if firewall_ipv4_output_allow_established %}

# Allow established connections
iptables -t filter -A OUTPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}
{% if firewall_ipv4_output_disallow_icmp_redirect %}

# Drop icmp redirect responses
iptables -t filter -A OUTPUT -p icmp --icmp-type redirect -j DROP
{% endif %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'filter' and rule.chain | lower == 'output' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_drop | default(False) %}
{% set rule_target = 'DROP' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_reject | default(False) %}
{% set rule_target = 'REJECT' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t filter -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_reject | default(False) %}
{% if rule.target_reject_with is defined %} --reject-with {{ rule.target_reject_with }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'filter' and rule.chain | lower not in ['input', 'forward', 'output'] %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_drop | default(False) %}
{% set rule_target = 'DROP' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_reject | default(False) %}
{% set rule_target = 'REJECT' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t filter -A {{ rule.chain -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_reject | default(False) %}
{% if rule.target_reject_with is defined %} --reject-with {{ rule.target_reject_with }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}

# Default values for NAT chains
iptables -t nat -P PREROUTING ACCEPT
iptables -t nat -P OUTPUT ACCEPT
iptables -t nat -P POSTROUTING ACCEPT
{% if firewall_ipv4_nat_prerouting_allow_established %}

# Allow established connections
iptables -t nat -A PREROUTING -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'nat' and rule.chain | lower == 'prerouting' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_dnat | default(False) %}
{% set rule_target = 'DNAT' %}
{% elif rule.target_redirect | default(False) %}
{% set rule_target = 'REDIRECT' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t nat -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_dnat | default(False) %}
{% if rule.target_dnat_destination is defined %} --to-destination {{ rule.target_dnat_destination }}{% endif %}
{% endif %}
{% if rule.target_redirect | default(False) %}
{% if rule.target_redirect_ports is defined %} --to-ports {{ rule.target_redirect_ports }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'nat' and rule.chain | lower == 'output' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_dnat | default(False) %}
{% set rule_target = 'DNAT' %}
{% elif rule.target_redirect | default(False) %}
{% set rule_target = 'REDIRECT' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t nat -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_dnat | default(False) %}
{% if rule.target_dnat_destination is defined %} --to-destination {{ rule.target_dnat_destination }}{% endif %}
{% endif %}
{% if rule.target_redirect | default(False) %}
{% if rule.target_redirect_ports is defined %} --to-ports {{ rule.target_redirect_ports }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% if firewall_ipv4_nat_postrouting_allow_established %}

# Allow established connections
iptables -t nat -A POSTROUTING -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
{% endif %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'nat' and rule.chain | lower == 'postrouting' %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_masquerade | default(False) %}
{% set rule_target = 'MASQUERADE' %}
{% elif rule.target_snat | default(False) %}
{% set rule_target = 'SNAT' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t nat -A {{ rule.chain | upper -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_masquerade | default(False) %}
{% if rule.target_masquerade_ports is defined %} --to-ports {{ rule.target_masquerade_ports }}{% endif %}
{% endif %}
{% if rule.target_snat | default(False) %}
{% if rule.target_snat_source is defined %} --to-source {{ rule.target_snat_source }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
{% for group, rules in firewall_ipv4_rules | dictsort %}
{% set rule_number = [0] %}
{% for rule in rules %}
{% if rule.table | default('filter') | lower == 'nat' and rule.chain | lower not in ['prerouting', 'output', 'postrouting'] %}
{% if rule_number[0] == 0 %}

# Group: {{ group }}
{% endif %}
{% if rule_number.append(rule_number.pop() + 1) %}{% endif %}
## Rule Nr. {{ rule_number[0] }}
{% set rule_states = ((rule.state_new | default(True)) | ternary(['NEW'], [])) %}
{% set rule_states = rule_states + ((rule.state_established | default(False)) | ternary(['ESTABLISHED'], [])) %}
{% set rule_states = rule_states + ((rule.state_related | default(False)) | ternary(['RELATED'], [])) %}
{% set rule_states = rule_states + ((rule.state_untracked | default(False)) | ternary(['UNTRACKED'], [])) %}
{% set rule_states = rule_states + ((rule.state_snat | default(False)) | ternary(['SNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_dnat | default(False)) | ternary(['DNAT'], [])) %}
{% set rule_states = rule_states + ((rule.state_invalid | default(False)) | ternary(['INVALID'], [])) %}
{% if rule.target_custom | default('') | length > 0 %}
{% set rule_target = rule.target_custom %}
{% elif rule.target_dnat | default(False) %}
{% set rule_target = 'DNAT' %}
{% elif rule.target_redirect | default(False) %}
{% set rule_target = 'REDIRECT' %}
{% elif rule.target_masquerade | default(False) %}
{% set rule_target = 'MASQUERADE' %}
{% elif rule.target_snat | default(False) %}
{% set rule_target = 'SNAT' %}
{% elif rule.target_queue | default(False) %}
{% set rule_target = 'QUEUE' %}
{% elif rule.target_return | default(False) %}
{% set rule_target = 'RETURN' %}
{% elif rule.target_log | default(False) %}
{% set rule_target = 'LOG' %}
{% elif rule.target_ulog | default(False) %}
{% set rule_target = 'ULOG' %}
{% else %}
{% set rule_target = 'ACCEPT' %}
{% endif %}
iptables -t nat -A {{ rule.chain -}}
{% if rule.interface_in is defined %} -i {{ rule.interface_in }}{% endif %}
{% if rule.interface_out is defined %} -o {{ rule.interface_out }}{% endif %}
{% if rule.source is defined %} -s {{ rule.source }}{% endif %}
{% if rule.sources is defined %} -s {{ rule.sources | join(',') }}{% endif %}
{% if rule.destination is defined %} -d {{ rule.destination }}{% endif %}
{% if rule.destinations is defined %} -d {{ rule.destinations | join(',') }}{% endif %}
{% if rule.protocol is defined %}
 -p {{ rule.protocol | lower -}}
{% if (rule.protocol | lower == 'tcp') and (rule_states | length == 1) and (rule.state_new | default(True)) %} --syn{% endif %}
{% if rule.protocol | lower == 'icmp' and rule.icmp_type is defined %} --icmp-type {{ rule.icmp_type }}{% endif %}
{% if rule.source_port is defined %} --sport {{ rule.source_port }}{% endif %}
{% if rule.destination_port is defined %} --dport {{ rule.destination_port }}{% endif %}
{% if rule.source_ports is defined or rule.destination_ports is defined %} -m multiport{% endif %}
{% if rule.source_ports is defined %} --sports {{ rule.source_ports | join(',') }}{% endif %}
{% if rule.destination_ports is defined %} --dports {{ rule.destination_ports | join(',') }}{% endif %}
{% endif %}
{% if rule_states | length > 0 %} -m conntrack --ctstate {{ rule_states | join(',') }}{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.limit is defined or rule.limit_burst is defined %} -m limit{% endif%}
{% if rule.limit is defined %} --limit {{ rule.limit }}{% endif %}
{% if rule.limit_burst is defined %} --limit-burst_burst {{ rule.limit_burst }}{% endif %}
{% endif %}
{% if rule.comment is defined %} -m comment --comment "{{ rule.comment }}"{% endif %}
 -j {{ rule_target -}}
{% if rule.target_dnat | default(False) %}
{% if rule.target_dnat_destination is defined %} --to-destination {{ rule.target_dnat_destination }}{% endif %}
{% endif %}
{% if rule.target_redirect | default(False) %}
{% if rule.target_redirect_ports is defined %} --to-ports {{ rule.target_redirect_ports }}{% endif %}
{% endif %}
{% if rule.target_masquerade | default(False) %}
{% if rule.target_masquerade_ports is defined %} --to-ports {{ rule.target_masquerade_ports }}{% endif %}
{% endif %}
{% if rule.target_snat | default(False) %}
{% if rule.target_snat_source is defined %} --to-source {{ rule.target_snat_source }}{% endif %}
{% endif %}
{% if rule.target_log | default(False) %}
{% if rule.target_log_level is defined %} --log-level {{ rule.target_log_level }}{% endif %}
{% if rule.target_log_prefix is defined %} --log-prefix "{{ rule.target_log_prefix }}"{% endif %}
{% if rule.target_log_tcp_sequence | default(False) %} --log-tcp-sequence{% endif %}
{% if rule.target_log_tcp_options | default(False) %} --log-tcp-options{% endif %}
{% if rule.target_log_ip_options | default(False) %} --log-ip-options{% endif %}
{% endif %}
{% if rule.target_ulog | default(False) %}
{% if rule.target_ulog_nlgroup is defined %} --ulog-nlgroup {{ rule.target_ulog_nlgroup }}{% endif %}
{% if rule.target_ulog_prefix is defined %} --ulog-prefix "{{ rule.target_ulog_prefix }}"{% endif %}
{% if rule.target_ulog_cprange is defined %} --ulog-cprange {{ rule.target_ulog_cprange }}{% endif %}
{% if rule.target_ulog_qthreshold is defined %} --ulog-qthreshold {{ rule.target_ulog_qthreshold }}{% endif %}
{% endif %}

{% endif %}
{% endfor %}
{% endfor %}
